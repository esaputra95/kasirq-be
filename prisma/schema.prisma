generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brands {
  id          String    @id @db.VarChar(36)
  ownerId     String?   @db.VarChar(36)
  name        String    @db.VarChar(50)
  description String?   @db.VarChar(255)
  userCreate  String?   @db.VarChar(36)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  users       users?    @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "brandUser")

  @@index([userCreate], map: "brandUser")
}

model categories {
  id                              String    @id @db.VarChar(36)
  ownerId                         String?   @db.VarChar(36)
  name                            String    @db.VarChar(50)
  description                     String?   @db.VarChar(255)
  userCreate                      String?   @db.VarChar(36)
  createdAt                       DateTime? @default(now()) @db.DateTime(0)
  updatedAt                       DateTime? @default(now()) @db.DateTime(0)
  deletedAt                       DateTime? @db.DateTime(0)
  products                        products[]
  users                           users?    @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "categoriUser")
  users_categories_ownerIdTousers users?    @relation("categories_ownerIdTousers", fields: [ownerId], references: [id], onDelete: Cascade, map: "categories_ibfk_1")

  @@index([userCreate], map: "categoriUser")
  @@index([ownerId], map: "ownerId")
}

model memberLevels {
  id                                String    @id @db.VarChar(36)
  ownerId                           String?   @db.VarChar(36)
  name                              String    @db.VarChar(100)
  level                             Int       @db.SmallInt
  userCreate                        String?   @db.VarChar(36)
  createdAt                         DateTime? @default(now()) @db.DateTime(0)
  updatedAt                         DateTime? @default(now()) @db.DateTime(0)
  deletedAt                         DateTime? @db.DateTime(0)
  users                             users     @relation(fields: [id], references: [id], onUpdate: Restrict, map: "memberLevelUser")
  users_memberLevels_ownerIdTousers users?    @relation("memberLevels_ownerIdTousers", fields: [ownerId], references: [id], onDelete: Cascade, map: "memberlevels_ibfk_1")

  @@index([ownerId], map: "memberLevelStore")
  @@index([userCreate], map: "userCreate")
}

model members {
  id                           String       @id @db.VarChar(36)
  ownerId                      String?      @db.VarChar(36)
  level                        Int?         @db.Int()
  name                         String       @db.VarChar(150)
  phone                        String?      @db.VarChar(16)
  address                      String?      @db.Text
  userCreate                   String?      @db.VarChar(36)
  createdAt                    DateTime?    @default(now()) @db.DateTime(0)
  updatedAt                    DateTime?    @default(now()) @db.DateTime(0)
  deletedAt                    DateTime?    @db.DateTime(0)
  users                        users?       @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "memberUser")
  users_members_ownerIdTousers users?       @relation("members_ownerIdTousers", fields: [ownerId], references: [id], onDelete: Cascade, map: "members_ibfk_1")
  sales                        sales[]

  @@index([userCreate], map: "memberUser")
}

model productConversions {
  id                   String                 @id @db.VarChar(36)
  productId            String                 @db.VarChar(36)
  unitId               String                 @db.VarChar(36)
  quantity             Int                    @default(1)
  status               Int?                   @default(1) @db.SmallInt
  userCreate           String?                @db.VarChar(36)
  createdAt            DateTime?              @default(now()) @db.DateTime(0)
  updatedAt            DateTime?              @default(now()) @db.DateTime(0)
  deletedAt            DateTime?              @db.DateTime(0)
  products products @relation(fields: [productId], references: [id])
  units units @relation(fields: [unitId], references: [id])
  productPurchasePrices productPurchasePrices[]
  productSellPrices productSellPrices[]
  itemInDetails        itemInDetails[]
  itemOutDetails       itemOutDetails[]
  productVariants      productVariants[]
  purchaseDetails      purchaseDetails[]
  purchaseOrderDetails purchaseOrderDetails[]
  saleDetails          saleDetails[]

  @@index([productId], map: "productConversionProduct")
  @@index([unitId], map: "productConversionUnit")
  @@index([userCreate], map: "productConversionUser")
}

model productVariants {
  id                 String             @id @db.VarChar(36)
  variantId          String             @db.VarChar(36)
  conversionId       String             @db.VarChar(36)
  price              Decimal?           @db.Decimal(14, 4)
  userCreate         String?            @db.VarChar(36)
  createdAt          DateTime?          @default(now()) @db.DateTime(0)
  updatedAt          DateTime?          @default(now()) @db.DateTime(0)
  deletedAt          DateTime?          @db.DateTime(0)
  productConversions productConversions @relation(fields: [conversionId], references: [id], onDelete: Cascade, map: "productVariantConversion")
  users              users?             @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "productVariantUser")
  variants           variants           @relation(fields: [variantId], references: [id], onUpdate: Restrict, map: "productVariantVariant")

  @@index([conversionId], map: "productVariantConversion")
  @@index([userCreate], map: "productVariantUser")
  @@index([variantId], map: "productVariantVariant")
}

model products {
  id                   String                    @id @db.VarChar(36)
  ownerId              String?                   @db.VarChar(36)
  categoryId           String?                   @db.VarChar(36)
  brandId              String?                   @db.VarChar(36)
  code                 String?                   @db.VarChar(50)
  barcode              String?                   @db.VarChar(100)
  name                 String                    @db.VarChar(255)
  hppType              String?                   @db.VarChar(15)
  taxInclude           Int?                      @db.SmallInt
  stockMinimum         Int?
  description          String?                   @db.Text
  status               products_status?          @default(active)
  image                String?                   @db.Text
  type                 products_type?
  consignment          Int?
  consignmentType      products_consignmentType?
  userCreate           String?                   @db.VarChar(36)
  createdAt            DateTime?                 @default(now()) @db.DateTime(0)
  updatedAt            DateTime?                 @default(now()) @db.DateTime(0)
  deletedAt            DateTime?                 @db.DateTime(0)
  priceType            Int?
  sku                  String?                   @db.VarChar(255)
  isStock              Int?
  productConversions productConversions[]
  stocks stocks[]
  categories           categories?                @relation(fields: [categoryId], references: [id])
  itemInDetails        itemInDetails[]
  itemOutDetails       itemOutDetails[]
  purchaseDetails      purchaseDetails[]
  purchaseOrderDetails purchaseOrderDetails[]
  saleDetails          saleDetails[]

  @@index([ownerId], map: "productStore")
  @@index([userCreate], map: "productUser")
  @@index([categoryId], map: "categoryId")
  @@index([brandId], map: "productBrand")
}

model purchaseDetails {
  id                  String              @id @db.VarChar(36)
  purchaseId          String              @db.VarChar(36)
  productId           String              @db.VarChar(36)
  productConversionId String?             @db.VarChar(36)
  quantityOrder       Decimal?            @db.Decimal(14, 4)
  quantity            Decimal?            @db.Decimal(14, 4)
  price               Decimal?            @db.Decimal(14, 4)
  discount            Decimal?            @db.Decimal(14, 4)
  total               Decimal?            @db.Decimal(14, 4)
  expiredDate         DateTime?           @db.Date
  userCreate          String?             @db.VarChar(36)
  createdAt           DateTime?           @default(now()) @db.DateTime(0)
  updatedAt           DateTime?           @default(now()) @db.DateTime(0)
  deletedAt           DateTime?           @db.DateTime(0)
  products            products            @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "purchaseDetailProduct")
  purchases           purchases           @relation(fields: [purchaseId], references: [id], onDelete: Cascade, map: "purchaseDetailPurchase")
  users               users?              @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "purchaseDetailUser")
  productConversions  productConversions? @relation(fields: [productConversionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "purchasedetails_ibfk_1")

  @@index([productId], map: "purchaseDetailProduct")
  @@index([purchaseId], map: "purchaseDetailPurchase")
  @@index([userCreate], map: "purchaseDetailUser")
  @@index([productConversionId], map: "purchaseDetailVariant")
}

model purchases {
  id                   String                 @id @db.VarChar(36)
  storeId              String?                @db.VarChar(36)
  supplierId           String                 @db.VarChar(36)
  purchaseOrderId      String?                @db.VarChar(36)
  date                 DateTime               @db.Date
  invoice              String                 @db.VarChar(100)
  subTotal             Decimal?               @db.Decimal(14, 4)
  tax                  Decimal?               @db.Decimal(14, 4)
  discount             Decimal?               @db.Decimal(14, 4)
  additionalCost        Decimal?               @db.Decimal(14, 4)
  total                Decimal?               @db.Decimal(14, 4)
  downPayment          Decimal?               @db.Decimal(14, 4)
  payCash              Decimal?               @db.Decimal(14, 4)
  payCredit            Decimal?               @db.Decimal(14, 4)
  payMetodeId          String?                @db.VarChar(36)
  accountCashId        String?                @db.VarChar(36)
  accountDebitId       String?                @db.VarChar(36)
  accountCreditId      String?                @db.VarChar(36)
  accountDownPaymentId String?                @db.VarChar(36)
  userCreate           String?                @db.VarChar(36)
  createdAt            DateTime?              @default(now()) @db.DateTime(0)
  updatedAt            DateTime?              @default(now()) @db.DateTime(0)
  deletedAt            DateTime?              @db.DateTime(0)
  itemOutDetails       itemOutDetails[]
  purchaseDetails      purchaseDetails[]
  purchaseOrderDetails purchaseOrderDetails[]
  stores               stores?                @relation(fields: [storeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "purchaseStore")
  suppliers            suppliers              @relation(fields: [supplierId], references: [id], onUpdate: Restrict, map: "purchaseSupplier")
  users                users?                 @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "purchaseUser")

  @@index([storeId], map: "purchaseStore")
  @@index([supplierId], map: "purchaseSupplier")
  @@index([userCreate], map: "purchaseUser")
}

model saleDetails {
  id                  String              @id @db.VarChar(36)
  saleId              String              @db.VarChar(36)
  productId           String              @db.VarChar(36)
  productConversionId String?             @db.VarChar(36)
  quantityOrder       Decimal?            @db.Decimal(14, 4)
  quantity            Decimal?            @db.Decimal(14, 4)
  price               Decimal?            @db.Decimal(14, 4)
  discount            Decimal?            @db.Decimal(14, 4)
  total               Decimal?            @db.Decimal(14, 4)
  expiredDate         DateTime?           @db.Date
  status              saleDetails_status? @default(ordered)
  userCreate          String?             @db.VarChar(36)
  createdAt           DateTime?           @default(now()) @db.DateTime(0)
  updatedAt           DateTime?           @default(now()) @db.DateTime(0)
  deletedAt           DateTime?           @db.DateTime(0)
  products            products            @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "saleDetailProduct")
  sales               sales               @relation(fields: [saleId], references: [id], onDelete: Cascade, map: "saleDetailSale")
  users               users?              @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "saleDetailUser")
  productConversions  productConversions? @relation(fields: [productConversionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "saledetails_ibfk_1")

  @@index([productId], map: "saleDetailProduct")
  @@index([saleId], map: "saleDetailSale")
  @@index([userCreate], map: "saleDetailUser")
  @@index([productConversionId], map: "saleDetailVariant")
}

model sales {
  id                   String        @id @db.VarChar(36)
  storeId              String?       @db.VarChar(36)
  memberId             String?       @db.VarChar(36)
  saleOrderId          String?       @db.VarChar(36)
  date                 DateTime?     @db.Date
  invoice              String?       @db.VarChar(100)
  subTotal             Decimal?      @db.Decimal(14, 4)
  tax                  Decimal?      @db.Decimal(14, 4)
  discount             Decimal?      @db.Decimal(14, 4)
  addtionalCost        Decimal?      @db.Decimal(14, 4)
  shippingCost         Decimal?      @db.Decimal(14, 4)
  total                Decimal?      @db.Decimal(14, 4)
  downPayment          Decimal?      @db.Decimal(14, 4)
  payCash              Decimal?      @db.Decimal(14, 4)
  payCredit            Decimal?      @db.Decimal(14, 4)
  payMetodeId          String?       @db.VarChar(36)
  status               sales_status? @default(ordered)
  accountCashId        String?       @db.VarChar(36)
  accountDebitId       String?       @db.VarChar(36)
  accountCreditId      String?       @db.VarChar(36)
  accountDownPaymentId String?       @db.VarChar(36)
  userCreate           String?       @db.VarChar(36)
  createdAt            DateTime?     @default(now()) @db.DateTime(0)
  updatedAt            DateTime?     @default(now()) @db.DateTime(0)
  deletedAt            DateTime?     @db.DateTime(0)
  saleDetails          saleDetails[]
  members              members?      @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "saleMember")
  stores               stores?       @relation(fields: [storeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "saleStore")
  users                users?        @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "saleUser")

  @@index([memberId], map: "saleMember")
  @@index([storeId], map: "saleStore")
  @@index([userCreate], map: "saleUser")
}

model stores {
  id             String           @id @db.VarChar(36)
  name           String           @db.VarChar(255)
  ownerId        String           @db.VarChar(36)
  address        String?          @db.Text
  expiredDate    DateTime?        @db.DateTime(0)
  createdAt      DateTime?        @default(now()) @db.DateTime(0)
  updatedAt      DateTime?        @default(now()) @db.DateTime(0)
  deletedAt      DateTime?        @db.DateTime(0)
  userCreate     String?          @db.VarChar(36)
  itemIns        itemIns[]
  itemOuts       itemOuts[]
  purchaseOrders purchaseOrders[]
  purchases      purchases[]
  sales          sales[]
  users          users            @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "storeUser")
  variants       variants[]

  @@index([ownerId], map: "storeUser")
}

model suppliers {
  id                             String           @id @db.VarChar(36)
  ownerId                        String?          @db.VarChar(36)
  name                           String           @db.VarChar(150)
  phone                          String?          @db.VarChar(15)
  address                        String?          @db.Text
  userCreate                     String?          @db.VarChar(36)
  createdAt                      DateTime?        @default(now()) @db.DateTime(0)
  updatedAt                      DateTime?        @default(now()) @db.DateTime(0)
  deletedAt                      DateTime?        @db.DateTime(0)
  purchaseOrders                 purchaseOrders[]
  purchases                      purchases[]
  users                          users?           @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "supplierUser")
  users_suppliers_ownerIdTousers users?           @relation("suppliers_ownerIdTousers", fields: [ownerId], references: [id], onDelete: Cascade, map: "suppliers_ibfk_1")

  @@index([ownerId], map: "supplierStore")
  @@index([userCreate], map: "supplierUser")
}

model units {
  id                         String    @id @db.VarChar(36)
  ownerId                    String    @db.VarChar(36)
  name                       String    @db.VarChar(50)
  description                String?   @db.VarChar(255)
  userCreate                 String?   @db.VarChar(36)
  createdAt                  DateTime? @default(now()) @db.DateTime(0)
  updatedAt                  DateTime? @default(now()) @db.DateTime(0)
  deletedAt                  DateTime? @db.DateTime(0)
  productConversions productConversions[]
  users                      users?    @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "unitUser")
  users_units_ownerIdTousers users     @relation("units_ownerIdTousers", fields: [ownerId], references: [id], onDelete: Cascade, map: "units_ibfk_1")

  @@index([ownerId], map: "unitStore")
  @@index([userCreate], map: "unitUser")
}

model users {
  id                                       String                 @id @default(uuid()) @db.VarChar(36)
  name                                     String                 @db.VarChar(255)
  username                                 String                 @db.VarChar(100)
  password                                 String                 @db.VarChar(255)
  email                                    String?                @db.VarChar(255)
  phone                                    String?                @db.VarChar(15)
  level                                    users_level?
  storeId                                  String?                @db.VarChar(36)
  createdAt                                DateTime?              @default(now()) @db.DateTime(0)
  updatedAt                                DateTime?              @default(now()) @db.DateTime(0)
  deletedAt                                DateTime?              @db.DateTime(0)
  userCreate                               String?                @db.VarChar(36)
  brands                                   brands[]
  categories                               categories[]
  categories_categories_ownerIdTousers     categories[]           @relation("categories_ownerIdTousers")
  itemInDetails                            itemInDetails[]
  itemIns                                  itemIns[]
  itemOutDetails                           itemOutDetails[]
  itemOuts                                 itemOuts[]
  memberLevels                             memberLevels?
  memberLevels_memberLevels_ownerIdTousers memberLevels[]         @relation("memberLevels_ownerIdTousers")
  members                                  members[]
  members_members_ownerIdTousers           members[]              @relation("members_ownerIdTousers")
  productVariants                          productVariants[]
  purchaseDetails                          purchaseDetails[]
  purchaseOrderDetails                     purchaseOrderDetails[]
  purchaseOrders                           purchaseOrders[]
  purchases                                purchases[]
  saleDetails                              saleDetails[]
  sales                                    sales[]
  stores                                   stores[]
  suppliers                                suppliers[]
  suppliers_suppliers_ownerIdTousers       suppliers[]            @relation("suppliers_ownerIdTousers")
  units                                    units[]
  units_units_ownerIdTousers               units[]                @relation("units_ownerIdTousers")
  variants                                 variants[]
}

model variants {
  id              String            @id @db.VarChar(36)
  storeId         String?           @db.VarChar(36)
  name            String            @db.VarChar(50)
  description     String?           @db.VarChar(255)
  userCreate      String?           @db.VarChar(36)
  createdAt       DateTime?         @default(now()) @db.DateTime(0)
  updatedAt       DateTime?         @default(now()) @db.DateTime(0)
  deletedAt       DateTime?         @db.DateTime(0)
  productVariants productVariants[]
  stores          stores?           @relation(fields: [storeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "variantStore")
  users           users?            @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "variantUser")

  @@index([storeId], map: "variantStore")
  @@index([userCreate], map: "variantUser")
}

model stocks {
  id String @id @db.VarChar(36)
  storeId String @db.VarChar(36)
  productId String @db.VarChar(36) @unique
  quantity Int @db.Int()
  userCreate String? @db.VarChar(36)
  createdAt DateTime? @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  products products? @relation(fields: [productId], references: [id])
}

model productPurchasePrices {
  id           String    @id @db.VarChar(36)
  conversionId String?   @db.VarChar(36)
  storeId      String?   @db.VarChar(36)
  price        Float?    @db.Float
  userCreate   String?   @db.VarChar(36)
  createdAt    DateTime? @db.DateTime(0)
  updatedAt    DateTime? @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  productConversions productConversions? @relation(fields: [conversionId], references: [id])
}

model productSellPrices {
  id           String    @id @db.VarChar(36)
  conversionId String?   @db.VarChar(36)
  storeId      String?   @db.VarChar(36)
  price        Float?    @db.Float
  level        Int?      @default(1) @db.SmallInt
  userCreate   String?   @db.VarChar(36)
  createdAt    DateTime? @db.DateTime(0)
  updatedAt    DateTime? @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  productConversions productConversions? @relation(fields: [conversionId], references: [id])
}

model hppHistory {
  id           String    @id @db.VarChar(36)
  conversionId String?   @db.VarChar(36)
  storeId      String?   @db.VarChar(36)
  transactionDetailId      String?   @db.VarChar(36)
  productConversionId      String?   @db.VarChar(36)
  price        Float?    @db.Float
  quantity        Int?      @default(1) @db.Int()
  quantityUsed Int? @db.Int()
  status hpp_history? @default(available)
}

model account {
  id        String    @id @db.VarChar(36)
  ownerId   String    @db.VarChar(36)
  name      String?   @db.VarChar(255)
  balance   Decimal?  @db.Decimal(13, 4)
  type      String?   @db.VarChar(10)
  createdAt DateTime? @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
}

model debts {
  id            String    @id @db.VarChar(36)
  transactionId String?   @db.VarChar(36)
  total         Decimal?  @db.Decimal(14, 4)
  paid          Decimal?  @db.Decimal(14, 4)
  remainder     Decimal?  @db.Decimal(14, 4)
  userCreate    String?   @db.VarChar(36)
  createdAt     DateTime? @db.DateTime(0)
  updatedAt     DateTime? @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
}

model itemInDetails {
  id                  String              @id @db.VarChar(36)
  itemInId          String              @db.VarChar(36)
  productId           String              @db.VarChar(36)
  productConversionId String?             @db.VarChar(36)
  quantity            Decimal?            @db.Decimal(14, 4)
  price               Decimal?            @db.Decimal(14, 4)
  total               Decimal?            @db.Decimal(14, 4)
  expiredDate         DateTime?           @db.Date
  description         String?             @db.Text
  userCreate          String?             @db.VarChar(36)
  createdAt           DateTime?           @default(now()) @db.DateTime(0)
  updatedAt           DateTime?           @default(now()) @db.DateTime(0)
  deletedAt           DateTime?           @db.DateTime(0)
  products            products            @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "itemindetails_ibfk_1")
  itemIns           itemIns           @relation(fields: [itemInId], references: [id], onDelete: Cascade, map: "itemindetails_ibfk_2")
  productConversions  productConversions? @relation(fields: [productConversionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "itemindetails_ibfk_3")
  users               users?              @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "itemindetails_ibfk_4")

  @@index([productId], map: "purchaseDetailProduct")
  @@index([itemInId], map: "purchaseDetailPurchase")
  @@index([userCreate], map: "purchaseDetailUser")
  @@index([productConversionId], map: "purchaseDetailVariant")
}

model itemIns {
  id          String    @id @db.VarChar(36)
  storeId     String?   @db.VarChar(36)
  date        DateTime  @db.Date
  invoice     String    @db.VarChar(100)
  subTotal    Decimal?  @db.Decimal(14, 4)
  total       Decimal?  @db.Decimal(14, 4)
  description String?   @db.Text
  userCreate  String?   @db.VarChar(36)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  stores      stores?   @relation(fields: [storeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "itemins_ibfk_1")
  users       users?    @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "itemins_ibfk_3")
  itemInDetails itemInDetails[]

  @@index([storeId], map: "purchaseStore")
  @@index([userCreate], map: "purchaseUser")
}

model itemOutDetails {
  id                  String              @id @db.VarChar(36)
  purchaseId          String              @db.VarChar(36)
  productId           String              @db.VarChar(36)
  productConversionId String?             @db.VarChar(36)
  quantity            Decimal?            @db.Decimal(14, 4)
  price               Decimal?            @db.Decimal(14, 4)
  total               Decimal?            @db.Decimal(14, 4)
  expiredDate         DateTime?           @db.Date
  description         String?             @db.Text
  userCreate          String?             @db.VarChar(36)
  createdAt           DateTime?           @default(now()) @db.DateTime(0)
  updatedAt           DateTime?           @default(now()) @db.DateTime(0)
  deletedAt           DateTime?           @db.DateTime(0)
  products            products            @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "itemoutdetails_ibfk_1")
  purchases           purchases           @relation(fields: [purchaseId], references: [id], onDelete: Cascade, map: "itemoutdetails_ibfk_2")
  productConversions  productConversions? @relation(fields: [productConversionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "itemoutdetails_ibfk_3")
  users               users?              @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "itemoutdetails_ibfk_4")

  @@index([productId], map: "purchaseDetailProduct")
  @@index([purchaseId], map: "purchaseDetailPurchase")
  @@index([userCreate], map: "purchaseDetailUser")
  @@index([productConversionId], map: "purchaseDetailVariant")
}

model itemOuts {
  id          String    @id @db.VarChar(36)
  storeId     String?   @db.VarChar(36)
  date        DateTime  @db.Date
  invoice     String    @db.VarChar(100)
  subTotal    Decimal?  @db.Decimal(14, 4)
  total       Decimal?  @db.Decimal(14, 4)
  description String?   @db.Text
  userCreate  String?   @db.VarChar(36)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  stores      stores?   @relation(fields: [storeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "itemouts_ibfk_1")
  users       users?    @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "itemouts_ibfk_2")

  @@index([storeId], map: "purchaseStore")
  @@index([userCreate], map: "purchaseUser")
}

model purchaseOrderDetails {
  id                  String              @id @db.VarChar(36)
  purchaseId          String              @db.VarChar(36)
  productId           String              @db.VarChar(36)
  productConversionId String?             @db.VarChar(36)
  quantity            Decimal?            @db.Decimal(14, 4)
  quantityReceived    Int?
  price               Decimal?            @db.Decimal(14, 4)
  discount            Decimal?            @db.Decimal(14, 4)
  total               Decimal?            @db.Decimal(14, 4)
  expiredDate         DateTime?           @db.Date
  userCreate          String?             @db.VarChar(36)
  createdAt           DateTime?           @default(now()) @db.DateTime(0)
  updatedAt           DateTime?           @default(now()) @db.DateTime(0)
  deletedAt           DateTime?           @db.DateTime(0)
  products            products            @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "purchaseorderdetails_ibfk_1")
  purchases           purchases           @relation(fields: [purchaseId], references: [id], onDelete: Cascade, map: "purchaseorderdetails_ibfk_2")
  productConversions  productConversions? @relation(fields: [productConversionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "purchaseorderdetails_ibfk_3")
  users               users?              @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "purchaseorderdetails_ibfk_4")

  @@index([productId], map: "purchaseDetailProduct")
  @@index([purchaseId], map: "purchaseDetailPurchase")
  @@index([userCreate], map: "purchaseDetailUser")
  @@index([productConversionId], map: "purchaseDetailVariant")
}

model purchaseOrders {
  id                   String    @id @db.VarChar(36)
  storeId              String?   @db.VarChar(36)
  supplierId           String    @db.VarChar(36)
  date                 DateTime  @db.Date
  sendDate             DateTime? @db.Date
  invoice              String    @db.VarChar(100)
  subTotal             Decimal?  @db.Decimal(14, 4)
  tax                  Decimal?  @db.Decimal(14, 4)
  discount             Decimal?  @db.Decimal(14, 4)
  addtionalCost        Decimal?  @db.Decimal(14, 4)
  total                Decimal?  @db.Decimal(14, 4)
  downPayment          Decimal?  @db.Decimal(14, 4)
  payCash              Decimal?  @db.Decimal(14, 4)
  payCredit            Decimal?  @db.Decimal(14, 4)
  payMetodeId          String?   @db.VarChar(36)
  accountCashId        String?   @db.VarChar(36)
  accountDebitId       String?   @db.VarChar(36)
  accountCreditId      String?   @db.VarChar(36)
  accountDownPaymentId String?   @db.VarChar(36)
  userCreate           String?   @db.VarChar(36)
  createdAt            DateTime? @default(now()) @db.DateTime(0)
  updatedAt            DateTime? @default(now()) @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  stores               stores?   @relation(fields: [storeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "purchaseorders_ibfk_1")
  suppliers            suppliers @relation(fields: [supplierId], references: [id], onUpdate: Restrict, map: "purchaseorders_ibfk_2")
  users                users?    @relation(fields: [userCreate], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "purchaseorders_ibfk_3")

  @@index([storeId], map: "purchaseStore")
  @@index([supplierId], map: "purchaseSupplier")
  @@index([userCreate], map: "purchaseUser")
}

enum products_status {
  active
  non_active @map("non-active")
}

enum hpp_history {
  available
  not_available
}

enum saleDetails_status {
  ordered
  cooking
  cancle
  served
  finish
}

enum products_type {
  item
  material
  formula
  package
  service
  cost
}

enum products_consignmentType {
  in
  out
}

enum sales_status {
  ordered
  finish
}

enum users_level {
  admin
  owner
  cashier
  supervisor
}
